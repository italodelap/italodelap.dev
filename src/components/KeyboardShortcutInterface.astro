---
import { experimental_AstroContainer } from "astro/container";

import "hotkeypad/index.css";

import { contactChannels } from "@/config/site.json";

import { createCommandPaletteItem } from "@/lib/command-palette";
import { getContactChannelIcon } from "@/lib/contact-channels";

const astroContainer = await experimental_AstroContainer.create();
async function renderIconAsString(iconName: string) {
  const icon = await getContactChannelIcon(iconName);
  return await astroContainer.renderToString(icon, {
    props: { class: "size-5" },
  });
}

const commandPaletteItems = await Promise.all(
  contactChannels
    .filter(({ network }) => network !== "email")
    .map(async (contactChannel) => {
      const { title: iconName } = contactChannel;
      const icon = await renderIconAsString(iconName);
      return createCommandPaletteItem(contactChannel, icon);
    }),
);
---

<footer
  class={`
    hidden print:hidden sm:block w-full py-2 fixed bottom-0
    text-sm text-center text-neutral-800
    bg-white border-t border-stone-200
  `}
>
  Press&nbsp;
  <kbd
    class="font-space-mono bg-stone-200 text-neutral-800 py-0.5 px-2 text-xs rounded-sm"
  >
    Ctrl
  </kbd>
  &nbsp;+&nbsp;
  <kbd
    class="font-space-mono bg-stone-200 text-neutral-800 py-0.5 px-2 text-xs rounded-sm"
  >
    K
  </kbd>
  &nbsp;to open the command palette
</footer>

<div
  id="hotkeypad"
  data-placeholder="Search command..."
  data-commands={JSON.stringify(commandPaletteItems)}
>
</div>

<script src="@/lib/keyboard-shortcut-interface"></script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  footer {
    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.5s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 50%;
  }
</style>

<style is:global>
  #hotkeypad [data-backdrop] {
    opacity: 0.25;
    background-color: var(--color-black);
  }
</style>
